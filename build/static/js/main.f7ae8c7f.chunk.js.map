{"version":3,"sources":["Stocks/Grafico.js","Stocks/Stock.js","Stocks/Cerca.js","Stocks/NomeStock.js","App.js","serviceWorker.js","index.js"],"names":["Grafico","props","width","height","data","datistock","margin","top","right","left","bottom","dataKey","domain","dataMin","toFixed","dataMax","strokeDasharray","y","label","stroke","type","Stock","aggiornoStock","setState","state","price","eliminoStock","id","getNewPrice","console","log","apiUrl","URL","params","symbol","Object","keys","forEach","key","searchParams","append","fetch","method","then","response","json","intraday","timeprice","entries","datatrade","open","datigrafico","datetime","substr","catch","error","startRealTime","timer","setInterval","stopRealTime","clearInterval","startStopRealTime","ckrt","ckrealtime","componentWillUnmount","showGrafico","mercato","this","pp","ps","colore","diff","diffperc","className","onClick","checked","for","np","ns","Component","Cerca","onInputChange","e","campoRicerca","target","value","onFocus","blur","invioForm","preventDefault","onInputSearch","onSubmit","name","onChange","NomeStock","onAddPreferiti","App","listastock","nome","quotazione","getElementi","str","inCaricamento","showError","datas","market","stock_exchange_short","JSON","stringify","prevState","listaelementi","msgError","message","ids","newstock","contatore","cont","listaPreferiti","elimino","preferiti","filter","el","cercaElementi","strcerca","alert","stock","map","index","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f7ae8c7f.chunk.js","sourcesContent":["import React from 'react'\r\nimport {LineChart, XAxis, YAxis, CartesianGrid, Line, Tooltip, Legend, ReferenceLine} from 'recharts'\r\n\r\n\r\nexport default function Grafico(props) {\r\n    return (\r\n        <div>\r\n            <LineChart width={600} height={400} data={props.datistock} margin={{top: 45, right: 30, left: 30, bottom: 5}}>\r\n                <XAxis dataKey=\"datetime\"/>\r\n                <YAxis domain= {[\r\n                    dataMin => ((dataMin-dataMin*2/100).toFixed(2)),\r\n                    dataMax => ((dataMax+dataMax*2/100).toFixed(2))\r\n                ]} />\r\n                <CartesianGrid strokeDasharray=\"3 3\"/>\r\n                <Tooltip/>\r\n                <Legend/>\r\n                <ReferenceLine y={2500} label=\"\" stroke=\"red\"/>\r\n                <Line type=\"monotone\" dataKey=\"price\" stroke=\"#8884d8\"/>\r\n            </LineChart >\r\n\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Grafico from './Grafico';\r\n\r\nexport default class Stock extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const { symbol, price, mercato } = this.props.datistock;\r\n    this.state = { symbol, price, mercato, datatrade: 'XXXX-XX-XX 16:00:00', ckrealtime:'',datigrafico: [{datetime: '16:00:00',price:price}], showGrafico: false };\r\n    console.log(\"1f) FIGLIO - Creo istanza \" + symbol);\r\n  }\r\n  // np  sono le proprietà di ingresso\r\n  // ns è lo stato attuale di questo componente\r\n\r\n  static getDerivedStateFromProps(np, ns) {\r\n    //console-log('1 fa) Figlio check props e state')\r\n    if(np.datistock.price !== ns.price &&\r\n      np.datistock.symbol !== ns.symbol){\r\n        return {\r\n          symbol: np.datistock.symbol,\r\n          price: np.datistock.price\r\n        }\r\n      }\r\n    return null;\r\n  }\r\n  componentDidMount() {\r\n    console.log(\"3 f) Figlio did mount \" + this.props.datistock.symbol);\r\n  }\r\n\r\n  componentDidUpdate(pp, ps) {\r\n    console.log(\"4 f) Figlio did update \" + this.props.datistock.symbol);\r\n    if (pp.datistock.price !== this.props.datistock.price) {\r\n      this.setState((state, props) => ({\r\n        price: props.datistock.price\r\n      }));\r\n    }\r\n  }\r\n  aggiornoStock = () => {\r\n    // si modifica lo stato passando una funzione perchè si deve utilizzare lo stato precedente\r\n    // e dunque siamo sicuri di utilizzare il valore corretto\r\n    this.setState((state, props) => ({ price: state.price + 10 }));\r\n  };\r\n\r\n  eliminoStock =()=>{\r\n    // al click del delete\r\n    // passo ad App js l' ID che lei stessa mi passa \r\n    this.props.eliminoStock(this.props.datistock.id)\r\n\r\n  }\r\n\r\n\r\n  getNewPrice=()=>{\r\n    console.log('richiesta nuovo prezzo')\r\n    \r\n      const apiUrl = new URL(\r\n          \"https://intraday.worldtradingdata.com/api/v1/intraday\"\r\n      );\r\n      \r\n      let params = {\r\n          \"symbol\": this.state.symbol,\r\n          \"api_token\": \"hOxKBC7K2lnyVNgfAdXOar5BqI1XHXtUepjtwYj9crlH7d4pqNnFdn65tu0B\",\r\n          \"interval\": \"1\",\r\n          \"range\": \"1\",\r\n      };\r\n      Object.keys(params)\r\n          .forEach(key => apiUrl.searchParams.append(key, params[key]));\r\n      \r\n      fetch(apiUrl, {\r\n          method: \"GET\",\r\n      })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n            \r\n            const {intraday} = response\r\n            const timeprice = Object.entries(intraday)[0]\r\n            const datatrade = timeprice[0]\r\n            const price = timeprice[1].open\r\n            const datigrafico = [...this.state.datigrafico, {datetime: datatrade.substr(11), price: price}]\r\n            this.setState({price: price, datatrade: datatrade, datigrafico})\r\n\r\n            \r\n/*             console.log('Recupero dati '+ JSON.stringify(data))\r\n */            \r\n          })\r\n          .catch((error)=>{\r\n            console.log('Fetch fallita', error)\r\n            \r\n          })\r\n\r\n\r\n  }\r\n  \r\n  startRealTime =()=>{\r\n    console.log('start real time ')\r\n    this.timer = setInterval(()=> this.getNewPrice(), 60000)\r\n  }\r\n\r\n  stopRealTime =()=>{\r\n    console.log('stop real time')\r\n    clearInterval(this.timer)\r\n  }\r\n  startStopRealTime=()=>{\r\n    const ckrt = this.state.ckrealtime === 'checked' ? '' : 'checked'\r\n\r\n    if (ckrt === 'checked'){\r\n      this.startRealTime()\r\n    }else{\r\n      this.stopRealTime()\r\n    }\r\n\r\n    this.setState({ckrealtime: ckrt})\r\n  }\r\n\r\n  componentWillUnmount =()=>{\r\n    this.stopRealTime()\r\n  }\r\n\r\n  showGrafico=()=>{\r\n    // toggle del grafico\r\n    this.setState({showGrafico: !this.state.showGrafico})\r\n\r\n  }\r\n\r\n\r\n\r\n  render() {\r\n    const colore = this.state.price > 280 ? 'giallo':'verde'\r\n    console.log(\"2 f) Figlio render \" + this.props.datistock.symbol);\r\n    // con le props passo solo il prezzo dell' azione alla chiusura dell giorno precedente\r\n    // con lo stato richiamo il prezzo attuale... quindi posso fare la variazione perc tra i due\r\n    const diff = (this.state.price - this.props.datistock.price).toFixed(2)\r\n    const diffperc = (this.props.datistock.price) ? (diff/this.props.datistock.price*100).toFixed(1) : '-'\r\n    return (\r\n      <div className=\"col-lg-6  col-xs-12  mt-4  \">\r\n        <div className=\"bodyStock\">\r\n        <div className=\"gray m1 p3\">\r\n        <i className=\"material-icons closebtn pointer\" onClick={this.eliminoStock}>\r\n              clear\r\n            </i>\r\n        <div className=\"row \">\r\n          <div className=\"col-lg-3   text-center\">\r\n            <h3 className={colore}>{this.props.datistock.symbol}</h3>\r\n            <p>{this.props.mercato}</p>\r\n          </div>\r\n          <div className=\"col-lg-3   text-center\">\r\n            <h3>{this.state.price}</h3>\r\n            {/* cancello le prime 11 lettere della stringa datatrade */}\r\n            <p>{this.state.datatrade.substr(11)}</p>\r\n          </div>\r\n          <div className=\"col-lg-3   text-center\">\r\n            <h3>{diffperc} %</h3>\r\n            <p>{diff}</p>\r\n          </div>\r\n          <div className=\"col-lg-3   \">\r\n            {/* <i className=\"material-icons pointer mr-2\" onClick={this.aggiornoStock}>\r\n              cached\r\n            </i> */}\r\n            <i className=\"material-icons pointer\" onClick={this.showGrafico}>trending_up</i>\r\n            \r\n            <div className=\"custom-control custom-switch\">\r\n              \r\n              <input type=\"checkbox\" className=\"custom-control-input\"  id=\"customSwitch1\"  checked={this.state.ckrealtime} />\r\n              <label className=\"custom-control-label pointer\"  for=\"customSwitch1\"  onClick={this.startStopRealTime}></label>\r\n              \r\n            </div>\r\n            \r\n          </div>\r\n          </div>\r\n        </div>\r\n        </div>\r\n        <div className=\"bodyGrafico\">\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              {this.state.showGrafico && <Grafico datistock={this.state.datigrafico}/>}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Cerca extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {campoRicerca:''}\r\n    }\r\n    onInputChange= e =>{\r\n        this.setState({\r\n            campoRicerca: e.target.value\r\n        })\r\n    }\r\n    onFocus=(e)=>{\r\n        //serve a togliere il blur del bottone dopo inviato \r\n        // altrimenti rimane bloccato\r\n        e.target.blur()\r\n\r\n    }\r\n    invioForm=e=>{\r\n        e.preventDefault()\r\n        //la funzione viene passata come props dal genitore App.js\r\n        // passo alla funzione il valore del campo di ricerca\r\n        this.props.onInputSearch(this.state.campoRicerca)\r\n        // ripulisco e torno allo stato iniziale una volta passato uil valore\r\n        this.setState({campoRicerca: ''})\r\n\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-12 d-flex align-itmes-center justify-content-center\">\r\n                    <form className=\"form-inline mb-2\" onSubmit={this.invioForm}>\r\n                        <div className=\"form-group\">\r\n                            <input className=\"form-control\" type=\"text\" name=\"cerca\" value={this.state.campoRicerca} onChange={this.onInputChange}/>\r\n\r\n                        </div>\r\n                        <button className=\"btn btn-primary ml-2\"  onFocus={this.onFocus}>Ok</button>\r\n                      \r\n                 \r\n\r\n                      \r\n                        \r\n                    </form>\r\n                </div>\r\n                 \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NomeStock(props) {\r\n    const addPreferiti=()=>{\r\n        props.onAddPreferiti(props.id)\r\n\r\n    }\r\n    return (\r\n        <div className=\"nomestock\" onClick={addPreferiti}>\r\n            <i className=\"material-icons\">add</i>\r\n            <p>{props.datistock.symbol} - {props.datistock.name}</p>\r\n\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Stock from \"./Stocks/Stock\";\r\nimport Cerca from \"./Stocks/Cerca\";\r\nimport NomeStock from './Stocks/NomeStock';\r\n\r\nexport default class App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      listastock: [{ nome: \"APPL\", quotazione: 250 }],\r\n      listaelementi:[],\r\n      listaPreferiti:[],\r\n      inCaricamento: false,\r\n      showError: false,\r\n      msgError: null,\r\n      mercato:'',\r\n      cont: 0\r\n      };\r\n    console.log(\"1g) GENITORE creo istanza\");\r\n  }\r\n  static getDerivedStateFromProps(np, ps) {\r\n    //console-log('1 fa) GENITORE check props e state')\r\n    return null;\r\n  }\r\n  componentDidMount() {\r\n    console.log(\"3g) GENITORE Did Mount\");\r\n    // interrogo l' API remota e aggiorno lo stato del componente\r\n    const stock = [\r\n      { nome: \"APPL\", quotazione: 350 },\r\n      { nome: \"GOOGLE\", quotazione: 67 }\r\n    ];\r\n    this.setState((props, state) => ({\r\n      listastock: stock\r\n    }));\r\n  }\r\n  aggiornoStock = () => {\r\n    const newStock = { nome: \"AMAZON\", quotazione: 500 };\r\n    this.setState({ listastock: [newStock] });\r\n  };\r\n  componentWillUnmount = () => {\r\n    console.log(\"5g) componente app distrutto \");\r\n  };\r\n\r\n  getElementi=(str)=>{\r\n    this.setState({inCaricamento: true, showError: false}) \r\n        const apiUrl = new URL(\r\n          \"https://api.worldtradingdata.com/api/v1/stock\"\r\n      );\r\n      \r\n      let params = {\r\n          \"symbol\": str,\r\n          \"api_token\": \"hOxKBC7K2lnyVNgfAdXOar5BqI1XHXtUepjtwYj9crlH7d4pqNnFdn65tu0B \",\r\n      };\r\n      Object.keys(params)\r\n          .forEach(key => apiUrl.searchParams.append(key, params[key]));\r\n      \r\n      fetch(apiUrl, {\r\n          method: \"GET\",\r\n      })\r\n          .then(response => response.json())\r\n          .then(response => {\r\n            const {data} = response\r\n            const datas = data[0]\r\n            const market = datas.stock_exchange_short\r\n            console.log(datas)\r\n            console.log(market)\r\n\r\n            \r\n\r\n\r\n            console.log('Recupero dati '+ JSON.stringify(data))\r\n            this.setState(prevState => ({\r\n              listaelementi: [...prevState.listaelementi, datas],\r\n             \r\n            }))\r\n             this.setState({inCaricamento: false, mercato: market}) \r\n\r\n            \r\n\r\n          })\r\n          .catch((error)=>{\r\n            console.log('Fetch fallita', error)\r\n            this.setState({\r\n              inCaricamento: false,\r\n              showError: true,\r\n              msgError: error.message,\r\n            }) \r\n          })\r\n\r\n\r\n  }\r\n\r\n  onAddPreferiti =(ids)=>{\r\n    // non posso usare gli id del map perchè assegna diversi id in seguito a diverse ricerche\r\n    // quindi creo un contatore nello stato e assegno quello come id alle stock\r\n    const newstock = this.state.listaelementi[ids]\r\n    const contatore = this.state.cont + 1\r\n    newstock['id'] = contatore\r\n    // identifico ogni elemento dell array dandogli un id e passandolo a questa funzione\r\n    // aggiungo all' array liste preferiti quegli elementi con gli id passati a questa funzione e modifico il contatore\r\n    this.setState({\r\n      listaPreferiti: [...this.state.listaPreferiti, newstock ],\r\n      cont: contatore\r\n    })\r\n  }\r\n\r\n  elimino =(id)=>{\r\n    console.log('elimina')\r\n    // se esiste un ID nella stock selezionata filtra l' array listaPreferiti \r\n    // e restituisci un nuovo array senza quell id\r\n    if(id ){\r\n      const preferiti = this.state.listaPreferiti.filter(el=>{\r\n        return el.id !== id\r\n      })\r\n      // modifica lo stato => chiamata al render \r\n      this.setState({listaPreferiti: preferiti})\r\n    }\r\n    \r\n  }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  cercaElementi = (strcerca)=>{\r\n    // interrogo l' API\r\n    alert(\"stai cercando \"+ strcerca)\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state)\r\n    console.log(\"2g) GENITORE render\");\r\n    return (\r\n      <div className=\"container-fluid\">\r\n        <div className=\"row\">\r\n          <div className=\"col-12 text-center mt-4\">\r\n            <h3>Applicazione Stock Quote </h3>\r\n            <Cerca onInputSearch={this.getElementi}></Cerca>\r\n            {this.state.showError && <p>{this.state.msgError}</p>}\r\n            { this.state.inCaricamento && <p>In Caricamento</p>}\r\n            <button className=\"btn btn-success\" onClick={this.aggiornoStock}>\r\n              Top Stock\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <div className=\"container\">\r\n          {/* <section className=\"listastock\">\r\n          <div className=\"row mt-4\">\r\n              {this.state.listastock.map((el, i) => (\r\n                <Stock datistock={el} key={i}></Stock>\r\n              ))}\r\n            </div>\r\n          </section> */}\r\n          <section className=\"listastock\">\r\n          <div className=\"row mt-4\">\r\n              {this.state.listaelementi.map((el, index) => (\r\n                <NomeStock datistock={el} key={el.symbol} id={index} onAddPreferiti={()=>this.onAddPreferiti(index)}></NomeStock>\r\n          \r\n              ))}\r\n            </div>\r\n          </section>\r\n          <section className=\"listapreferiti\">\r\n          <div className=\"row mt-4\">\r\n            {this.state.listaPreferiti.map((el, index)=>\r\n              <Stock datistock={el} key={el.id} eliminoStock ={this.elimino} mercato={this.state.mercato}/>\r\n            )}\r\n              \r\n            </div>\r\n          </section>\r\n            \r\n        </div>\r\n       \r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}